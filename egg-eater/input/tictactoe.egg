def link(first, rest):
  (first, rest)
and
def get(l, n):
  if n == 0: l[0 of 2]
  else:
  	get(l[1 of 2], n - 1)
and
def set(l, n, v):
  if n == 0: l[0 of 2 := v]
  else:
    set(l[1 of 2], n - 1, v) 
and
def length(l):
  if l == false: 0
  else:
    1 + length(l[1 of 2])
and
def sum(l):
  if l == false: 0
  else:
  	l[0 of 2] + sum(l[1 of 2])
and
def append(l1, l2):
  if l1 == false: l2
  else:
  	link(l1[0 of 2], append(l1[1 of 2], l2))
and
def reverse(l):
  if l == false: l
  else:
  	append(reverse(l[1 of 2]), link(l[0 of 2], false))
and
def make_row():
  link(0, (link(0, (link(0, false)))))
and
def make_board():
  link(make_row(), link(make_row(), link(make_row(), false)))
and
def print_row(row):
  print(row)
and
def print_rows(rows):
  if rows == false: 0
  else:
  	print_row(rows[0 of 2]);
  	print_rows(rows[1 of 2])
and
def make_move(board, x, y, player):
  let row = get(board, x) in
  	set(row, y, player)
and
def set_diag(diag, x, y, player):
  	if x == y: 
  		diag[0 of 1 := (diag[0 of 1] + player)]
  	else: 0
and
def set_adiag(adiag, x, y, player):
  	if x == (2 - y): 
  		adiag[0 of 1 := (adiag[0 of 1] + player)]
  	else: 0
and
def play_game(board, counter, player, rows, cols, diag, adiag):
  if counter == 10: 0
  else: 
  	let cur_player = (if player == 1: -1 else: 1) in
  	let x = input(0) in
  	let y = input(0) in
  		make_move(board, x, y, cur_player);
  		set(rows, x, get(rows, x) + cur_player);
  		set(cols, y, get(cols, y) + cur_player);
  		set_diag(diag, x, y, cur_player);
  		set_adiag(diag, x, y, cur_player);
  		print_rows(board);
  	    if ((get(rows, x) == 3) || (get(cols, y) == 3) || (diag[0 of 1] == 3) || (adiag[0 of 1] == 3)): 1
  	    else:
  	    	if ((get(rows, x) == -3) || (get(cols, y) == -3) || (diag[0 of 1] == -3) || (adiag[0 of 1] == -3)): -1
  	    	else:
  			  play_game(board, counter + 1, cur_player, rows, cols, diag, adiag)

let board = make_board() in
	let rows = make_row() in
	let cols = make_row() in
	let diag = (0,) in
	let adiag = (0,) in
		print_rows(board);
		play_game(board, 0, 1, rows, cols, diag, adiag)
   

